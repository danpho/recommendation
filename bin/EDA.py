# -*- coding: utf-8 -*-
"""h_m_eda_first_look.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FALKaMstlH47aC6vKRlXo6ABAsKIFgUc

## **<span style="color:#023e8a;font-size:1000%"><center>EDA</center></span><span style="color:#023e8a;font-size:200%"><center>Exploratory Data Analysis. H&M</center></span>**

# **<a id="Content" style="color:#023e8a;">Table of Content</a>**
* [**<span style="color:#023e8a;">1. First steps</span>**](#First)  
* [**<span style="color:#023e8a;">2. Articles</span>**](#Articles)  
* [**<span style="color:#023e8a;">3. Customers</span>**](#Customers)  
* [**<span style="color:#023e8a;">4. Transactions</span>**](#Transactions)  
* [**<span style="color:#023e8a;">5. Images with description and price</span>**](#Images)

## **<span style="color:#023e8a;">Intro</span>**

**<span style="color:#023e8a;">The competition is dedicated to the product recomendations (H&M)  </span>**

**<span style="color:#023e8a;">Here we have different kinds of data that help us to get good recomendations: </span>**

ðŸ“¸ `images` - images of every article_id

ðŸ™‹ `articles`  - detailed metadata of every article_id

ðŸ‘” `customers`  - detailed metadata of every customer_id

ðŸ§¾ `transactions_train`  - purchases with details

## **<span id="First" style="color:#023e8a;">1. First steps</span>**

[**<span style="color:#FEF1FE;background-color:#023e8a;border-radius: 5px;padding: 2px">Go to Table of Content</span>**](#Content)

**<span style="color:#023e8a;"> The first step as always: load the data :)</span>**
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import platform
dir_separator = ''
start_date = '2019-05-01'
end_date = '2019-07-31'

print("L44:", platform.system())
if platform.system() == "Windows":
    dir_separator = "\\"
else:
    dir_separator = "/"

os.getcwd()

import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
from tqdm.notebook import tqdm
pd.options.display.max_rows = 50

def set_custom_palette(series, max_color = 'cyan', min_color = 'skyblue' ,other_color = 'yellow'):
    max_val = series.max()
    min_val = series.min()
    pal = []

    for item in series:
        if item == max_val:
            pal.append(max_color)
        elif item == min_val:
            pal.append(min_color)
        else:
            pal.append(other_color)
    return pal

if platform.system() == 'Windows':
    work_dir = os.getcwd().rstrip() + dir_separator
    data_dir = work_dir + ".." + dir_separator + "data" + dir_separator + "hm" + dir_separator
else:
    from google.colab import drive
    # os.getcwd()
    # drive.mount('/content/drive/')
    # !pwd
    # print(os.listdir())
    # %cd /content/drive/My\ Drive/
    # %cd Colab\ Notebooks
    # %cd "/content/drive/MyDrive/Colab\ Notebooks"
    # !pwd

article_csv = data_dir + "articles.csv"
customers_csv = data_dir + "customers.csv"
transactions_csv = data_dir + "transactions_train.csv"

# articles = pd.read_csv("./articles.csv")
# customers = pd.read_csv("./customers.csv")
# transactions = pd.read_csv("./transactions_train.csv")
articles = pd.read_csv(article_csv)
customers = pd.read_csv(customers_csv)
transactions = pd.read_csv(transactions_csv)

"""**<span style="color:#023e8a;"> Let's look at the tables and try to get some outcomes about data inside.</span>**

## **<span id="Articles" style="color:#023e8a;">2. Articles</span>**

[**<span style="color:#FEF1FE;background-color:#023e8a;border-radius: 5px;padding: 2px">Go to Table of Content</span>**](#Content)

**<span style="color:#023e8a;"> This table contains all h&m articles with details such as a type of product, a color, a product group and other features.</span>**  
**<span style="color:#023e8a;"> Article data description: </span>**

> `article_id` **<span style="color:#023e8a;">: A unique identifier of every article.</span>**  
> `product_code`, `prod_name` **<span style="color:#023e8a;">: A unique identifier of every product and its name (not the same).</span>**  
> `product_type`, `product_type_name` **<span style="color:#023e8a;">: The group of product_code and its name</span>**  
> `graphical_appearance_no`, `graphical_appearance_name` **<span style="color:#023e8a;">: The group of graphics and its name</span>**  
> `colour_group_code`, `colour_group_name` **<span style="color:#023e8a;">: The group of color and its name</span>**  
> `graphical_appearance_no`, `graphical_appearance_name` **<span style="color:#023e8a;">: The group of graphics and its name</span>**  
> `perceived_colour_value_id`, `perceived_colour_value_name`, `perceived_colour_master_id`, `perceived_colour_master_name` **<span style="color:#023e8a;">: The added color info</span>**  
> `department_no`, `department_name`: **<span style="color:#023e8a;">: A unique identifier of every dep and its name</span>**  
> `index_code`, `index_name`: **<span style="color:#023e8a;">: A unique identifier of every index and its name</span>**  
> `index_group_no`, `index_group_name`: **<span style="color:#023e8a;">: A group of indeces and its name</span>**  
> `section_no`, `section_name`: **<span style="color:#023e8a;">: A unique identifier of every section and its name</span>**  
> `garment_group_no`, `garment_group_name`: **<span style="color:#023e8a;">: A unique identifier of every garment and its name</span>**  
> `detail_desc`: **<span style="color:#023e8a;">: Details</span>**
"""

articles.info()

"""**NOTE: All Dtype with int64 are ids which may be set in wrong types or other reasons.**"""

articles.isnull().sum()

"""There are only 416 records missing value which are only shown in detail_desc."""

articles.describe()

articles.head()

articles.index_group_name.unique()

articles.index_name.unique()

"""**Above shows that the unique values of index_group_name and index_name are different. The difference suggests that we may consider sub-groups.**

"""

#@title
articles_grouped_count = articles.groupby('index_name').count().reset_index()
print(articles_grouped_count.head())

"""**<span style="color:#023e8a;">Ladieswear accounts for a significant part of all dresses. Sportswear has the least portion.</span>**"""

f, ax = plt.subplots(figsize=(12, 6))
ax = sns.histplot(data=articles, y='index_name', color='orange')
ax.set_xlabel('count by index name')
ax.set_ylabel('index name')
plt.show()

"""**group by "product_type_name"
There are 131 product types. The minimum amount of product type is only one, and the maximum is 11169.**
"""

f, ax = plt.subplots(figsize=(15, 7))
ax = sns.histplot(data=articles, y='garment_group_name', color='orange', hue='index_group_name', multiple="stack")
ax.set_xlabel('count by garment group')
ax.set_ylabel('garment group')
plt.show()

"""**<span style="color:#023e8a;">Now, pay attention to index group-index structure. Ladieswear and Children/Baby have subgroups.</span>**"""

articles.groupby(['index_group_name', 'index_name']).count()['article_id']

"""**<span style="color:#023e8a;"> The garments grouped by index: Jersey fancy is the most frequent garment, especially for women and children. The next by number is accessories, many various accessories with low price.</span>**"""

articles.product_type_name.unique()

print("number of product groups is {}".format(len(articles.product_type_name.unique())))

articles.garment_group_name.unique()

f, ax = plt.subplots(figsize=(15, 7))
ax = sns.histplot(data=articles, y='product_type_name', color='orange', hue='product_type_name', multiple='stack')
ax.set_xlabel("Count by product group")
ax.set_ylabel("product group")
plt.show()

articles_groupedby_product_type = articles.groupby('product_type_name').count()
articles_groupedby_product_type

print("maximum number of articles groupby product type has {} articles".format(max(set(sorted(articles_groupedby_product_type.article_id)))))
print("minimum number of articles groupby product type has {} articles".format(min(set(sorted(articles_groupedby_product_type.article_id)))))

"""**<span style="color:#023e8a;"> And look at the product group-product structure. Accessories are really various, the most numerious: bags, earrings and hats. However, trousers prevail.</span>**"""

pd.options.display.max_rows = None
articles.groupby(['product_group_name', 'product_type_name']).count()['article_id']

"""**<span style="color:#023e8a;"> And the table with number of unique values in columns:</span>**"""

for col in articles.columns:
    if not 'no' in col and not 'code' in col and not 'id' in col:
        un_n = articles[col].nunique()
        print(f'n of unique {col}: {un_n}')

"""## **<span id="Customers" style="color:#023e8a;">3. Customers</span>**

[**<span style="color:#FEF1FE;background-color:#023e8a;border-radius: 5px;padding: 2px">Go to Table of Content</span>**](#Content)

**<span style="color:#023e8a;"> Customers data description: </span>**

> `customer_id` **<span style="color:#023e8a;">: A unique identifier of every customer</span>**  
> `FN` **<span style="color:#023e8a;">: 1 or missed </span>**  
> `Active` **<span style="color:#023e8a;">: 1 or missed</span>**  
> `club_member_status` **<span style="color:#023e8a;">: Status in club</span>**  
> `fashion_news_frequency` **<span style="color:#023e8a;">: How often H&M may send news to customer</span>**  
> `age` **<span style="color:#023e8a;">: The current age</span>**  
> `postal_code` **<span style="color:#023e8a;">: Postal code of customer</span>**
"""

customers.info()

customers.isnull().sum()

pd.options.display.max_rows = 50
customers.head()

"""check what kind of data is in each columns and count nulls."""

print('FN uniques are:', customers['FN'].unique())
print('Active uniques are:', customers['Active'].unique())
print('club_member_status uniques are:', customers['club_member_status'].unique())
print('fashion_news_frequency uniques are:', customers['fashion_news_frequency'].unique())
print('percentage where ages are null/total = {}/{} = {:.4f}%'.format(customers['age'].isnull().sum(),
len(customers), customers['age'].isnull().sum()/len(customers)*100))

"""Fill NAN for visualization"""

customers['FN'] = customers['FN'].fillna(0)
customers['Active'] = customers['Active'].fillna(0)
customers['club_member_status'] = customers['club_member_status'].fillna('NON_MEMBER')
customers['fashion_news_frequency'] = customers['fashion_news_frequency'].fillna('NONE')
customers['fashion_news_frequency'] = customers['fashion_news_frequency'].replace('None', 'NONE')

customer = customers.dropna(inplace=True)
len(customer['age'])

"""**<span style="color:#023e8a;"> There are no duplicates in </span>** `customers`"""

customers.shape

customers['customer_id'].nunique()

customers.shape[0] - customers['customer_id'].nunique()

"""**<span style="color:#023e8a;"> Here we have abnormal number of customers by one postal code. One has 120303, it might be encoded nan adress or smth like a huge distribution center, or pickup.</span>**"""

data_postal = customers.groupby('postal_code').count().sort_values('customer_id', ascending=False)
data_postal.head()

data_postal = customers.groupby('postal_code', as_index=False).count().sort_values('customer_id', ascending=False)
data_postal.head()

"""**<span style="color:#023e8a;"> Ages, club_member_status are different, like customer_ids.</span>**"""

customers[customers['postal_code']=='2c29ae653a9282cce4151bd87643c907644e09541abc28ae87dea0d1f6603b1c'].head(5)

"""**<span style="color:#023e8a;"> The most common age is about 21-23</span>**"""

import seaborn as sns
from matplotlib import pyplot as plt
sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(10,5))
ax = sns.histplot(data=customers, x='age', bins=100, color='orange')
ax.set_xlabel('Distribution of the customers age')
plt.show()

"""**<span style="color:#023e8a;"> Status in H&M club. Almost every customer has an active club status, some of them begin to activate it (pre-create). A tiny part of customers abandoned the club.</span>**"""

sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(10,5))
ax = sns.histplot(data=customers, x='club_member_status', color='orange')
ax.set_xlabel('Distribution of club member status')
plt.show()

"""**<span style="color:#023e8a;"> Here we have three types for NO DATA. Let's unite these values.</span>**"""

customers['fashion_news_frequency'].unique()

customers.loc[~customers['fashion_news_frequency'].isin(['Regularly', 'Monthly']), 'fashion_news_frequency'] = 'None'
customers['fashion_news_frequency'].unique()

pie_data = customers[['customer_id', 'fashion_news_frequency']].groupby('fashion_news_frequency').count()

"""**<span style="color:#023e8a;"> Customers prefer not to get any messages about the current news.</span>**"""

sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(10,5))
# ax = sns.histplot(data=customers, x='fashion_news_frequency', color='orange')
# ax = sns.pie(data=customers, x='fashion_news_frequency', color='orange')
colors = sns.color_palette('pastel')
ax.pie(pie_data.customer_id, labels=pie_data.index, colors = colors)
ax.set_facecolor('lightgrey')
ax.set_xlabel('Distribution of fashion news frequency')
plt.show()

"""## **<span id="Transactions" style="color:#023e8a;">4. Transactions</span>**

[**<span style="color:#FEF1FE;background-color:#023e8a;border-radius: 5px;padding: 2px">Go to Table of Content</span>**](#Content)

**<span style="color:#023e8a;"> Transactions data description: </span>**

> `t_dat` **<span style="color:#023e8a;">: A unique identifier of every customer</span>**  
> `customer_id` **<span style="color:#023e8a;">: A unique identifier of every customer </span>**  **<span style="color:#FF0000;">(in </span>** `customers` **<span style="color:#FF0000;"> table)</span>**  
> `article_id` **<span style="color:#023e8a;">: A unique identifier of every article</span>**  **<span style="color:#FF0000;">(in </span>** `articles` **<span style="color:#FF0000;"> table)</span>**  
> `price` **<span style="color:#023e8a;">: Price of purchase</span>**  
> `sales_channel_id` **<span style="color:#023e8a;">: 1 or 2</span> (on or offline)**

**Apparently, price is the only target**
"""

transactions.info()

transactions.head()

"""**<span style="color:#023e8a;"> Here we see outliers for price. </span>**"""

pd.set_option('display.float_format', '{:.4f}'.format)
transactions.describe()['price']

transactions.head()

sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(10,5))
ax = sns.boxplot(data=transactions, x='price', color='orange')
ax.set_xlabel('Price outliers')
plt.show()

"""**<span style="color:#023e8a;"> Top 10 customers by num of transactions. </span>**"""

transactions_byid = transactions.groupby('customer_id').count()
transactions_byid.sort_values(by='price', ascending=False)['price'][:25]

"""**<span style="color:#023e8a;"> However, comparing prices inside groups is more accurate, because accessories and trousers prices may vary largerly. </span>**

**<span style="color:#023e8a;"> Get subset from articles and merge it to transactions. </span>**
"""

articles_for_merge = articles[['article_id', 'prod_name', 'product_type_name', 'product_group_name', 'index_name']]

articles_for_merge = transactions[['customer_id', 'article_id', 'price', 't_dat']].merge(articles_for_merge, on='article_id', how='left')

"""**<span style="color:#023e8a;"> Here we see outliers for group name prices. Lower/Upper/Full body have a huge price variance. I guess it could be like some unique collections, relative to casual ones. Some high price articles even belong to accessories group.</span>**"""

sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(25,18))
ax = sns.boxplot(data=articles_for_merge, x='price', y='product_group_name')
ax.set_xlabel('Price outliers', fontsize=22)
ax.set_ylabel('Index names', fontsize=22)
ax.xaxis.set_tick_params(labelsize=22)
ax.yaxis.set_tick_params(labelsize=22)

plt.show()

"""**<span style="color:#023e8a;"> Then look at boxplot prices according to accessories product group and find the reasons of high prices inside group.</span>**

**<span style="color:#023e8a;"> The largest outliers can be found among bags, which is logical enough. In addition, scarves and other accessories have articles with prices highly contrasting to the rest of garments.</span>**
"""

sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(25,18))
_ = articles_for_merge[articles_for_merge['product_group_name'] == 'Accessories']
ax = sns.boxplot(data=_, x='price', y='product_type_name')
ax.set_xlabel('Price outliers', fontsize=22)
ax.set_ylabel('Index names', fontsize=22)
ax.xaxis.set_tick_params(labelsize=22)
ax.yaxis.set_tick_params(labelsize=22)
del _

plt.show()

"""**<span style="color:#023e8a;"> The index with the highest mean price is Ladieswear. With the lowest - children. </span>**"""

articles_index = articles_for_merge[['index_name', 'price']].groupby('index_name').mean()
sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(10,5))
ax = sns.barplot(x=articles_index.price, y=articles_index.index, color='orange', alpha=0.8)
ax.set_xlabel('Price by index')
ax.set_ylabel('Index')
plt.show()

articles_index.shape

"""**<span style="color:#023e8a;"> Stationery has the lowest mean price, the highest - shoes. </span>**"""

articles_index = articles_for_merge[['product_group_name', 'price']].groupby('product_group_name').mean()
sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(10,5))
ax = sns.barplot(x=articles_index.price, y=articles_index.index, color='orange', alpha=0.8)
ax.set_xlabel('Price by product group')
ax.set_ylabel('Product group')
plt.show()

"""**<span style="color:#023e8a;"> Now check the mean price change in time for top 5 product groups by mean price: </span>**
>`Shoes`  
>`Garment Full body`  
>`Bags`  
>`Garment Lower body`  
>`Underwear/nightwear`  
"""

articles_for_merge['t_dat'] = pd.to_datetime(articles_for_merge['t_dat'])
articles_for_merge.head()

product_list = ['Shoes', 'Garment Full body', 'Bags', 'Garment Lower body', 'Underwear/nightwear']
colors = ['cadetblue', 'orange', 'mediumspringgreen', 'tomato', 'lightseagreen']
k = 0
f, ax = plt.subplots(3, 2, figsize=(20, 15))
for i in range(3):
    for j in range(2):
        try:
            product = product_list[k]
            articles_for_merge_product = articles_for_merge[articles_for_merge.product_group_name == product_list[k]]
            series_mean = articles_for_merge_product[['t_dat', 'price']].groupby(pd.Grouper(key="t_dat", freq='M')).mean().fillna(0)
            series_std = articles_for_merge_product[['t_dat', 'price']].groupby(pd.Grouper(key="t_dat", freq='M')).std().fillna(0)
            ax[i, j].plot(series_mean, linewidth=4, color=colors[k])
            ax[i, j].fill_between(series_mean.index, (series_mean.values-2*series_std.values).ravel(),
                             (series_mean.values+2*series_std.values).ravel(), color=colors[k], alpha=.1)
            ax[i, j].set_title(f'Mean {product_list[k]} price in time')
            ax[i, j].set_xlabel('month')
            ax[i, j].set_xlabel(f'{product_list[k]}')
            k += 1
        except IndexError:
            ax[i, j].set_visible(False)
plt.show()

# """## **<span id="Images" style="color:#023e8a;">5. Images with description and price</span>**
#
# [**<span style="color:#FEF1FE;background-color:#023e8a;border-radius: 5px;padding: 2px">Go to Table of Content</span>**](#Content)
#
# **<span style="color:#023e8a;"> Let's check the last purchases by max price and by min price </span>**
# """
#
# import matplotlib.pyplot as plt
# import matplotlib.image as mpimg
#
# max_price_ids = transactions[transactions.t_dat==transactions.t_dat.max()].sort_values('price', ascending=False).iloc[:5][['article_id', 'price']]
# min_price_ids = transactions[transactions.t_dat==transactions.t_dat.min()].sort_values('price', ascending=True).iloc[:5][['article_id', 'price']]
#
# """**<span style="color:#023e8a;"> Photos with description and price (top 5 max) </span>**"""
#
# f, ax = plt.subplots(1, 5, figsize=(20,10))
# i = 0
# for _, data in max_price_ids.iterrows():
#     desc = articles[articles['article_id'] == data['article_id']]['detail_desc'].iloc[0]
#     desc_list = desc.split(' ')
#     for j, elem in enumerate(desc_list):
#         if j > 0 and j % 5 == 0:
#             desc_list[j] = desc_list[j] + '\n'
#     desc = ' '.join(desc_list)
#     img = mpimg.imread(f'../input/h-and-m-personalized-fashion-recommendations/images/0{str(data.article_id)[:2]}/0{int(data.article_id)}.jpg')
#     ax[i].imshow(img)
#     ax[i].set_title(f'price: {data.price:.2f}')
#     ax[i].set_xticks([], [])
#     ax[i].set_yticks([], [])
#     ax[i].grid(False)
#     ax[i].set_xlabel(desc, fontsize=10)
#     i += 1
# plt.show()
#
# """**<span style="color:#023e8a;"> Photos with description and price (top 5 min) </span>**"""
#
# f, ax = plt.subplots(1, 5, figsize=(20,10))
# i = 0
# for _, data in min_price_ids.iterrows():
#     desc = articles[articles['article_id'] == data['article_id']]['detail_desc'].iloc[0]
#     desc_list = desc.split(' ')
#     for j, elem in enumerate(desc_list):
#         if j > 0 and j % 4 == 0:
#             desc_list[j] = desc_list[j] + '\n'
#     desc = ' '.join(desc_list)
#     img = mpimg.imread(f'../input/h-and-m-personalized-fashion-recommendations/images/0{str(data.article_id)[:2]}/0{int(data.article_id)}.jpg')
#     ax[i].imshow(img)
#     ax[i].set_title(f'price: {data.price:.4f}')
#     ax[i].set_xlabel(desc, fontsize=10)
#     ax[i].set_xticks([], [])
#     ax[i].set_yticks([], [])
#     ax[i].grid(False)
#     i += 1
# plt.axis('off')
# plt.show()
#
# """## **<center><span style="color:#FEF1FE;background-color:#023e8a;border-radius: 5px;padding: 5px">Thanks for reading! If you find this notebook useful or interesting, please, support with an upvote :)</span></center>**

# **Seasonal EDA**
# """

transactions.columns

transactions.info()

transactions['t_dat'] = pd.to_datetime(transactions['t_dat'])

transactions.info()

# from datetime import datetime as dt
t_date = transactions['t_dat']
t_date.dt.month

s_transactions = transactions.loc[(transactions['t_dat'] >= '2019-05-01') & (transactions['t_dat'] <= '2019-07-31')]

articles.columns

# articles for merge
articles_for_merge = articles[['article_id', 'prod_name', 'product_type_name', 'product_group_name', 'index_name', 'index_group_name']]
articles_for_merge = transactions[['customer_id', 'article_id', 'price', 't_dat']].merge(articles_for_merge, on='article_id', how='left')

s_transactions = articles_for_merge.loc[(articles_for_merge['t_dat'] >= start_date)&(articles_for_merge['t_dat']
<= end_date)]

print(s_transactions.describe()['price'])

sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(10,5))
ax = sns.boxplot(data=s_transactions, x='price', color='orange')
ax.set_xlabel('Price outliers')
plt.show()

s_transactions_byid = s_transactions.groupby('customer_id').count()

s_transactions_byid.sort_values(by='price', ascending=False)['price'][:25]

sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(25,18))
ax = sns.boxplot(data=s_transactions, x='price', y='product_group_name')
ax.set_xlabel('Price outliers', fontsize=22)
ax.set_ylabel('Index names', fontsize=22)
ax.xaxis.set_tick_params(labelsize=22)
ax.yaxis.set_tick_params(labelsize=22)
plt.show()

sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(25,18))
_ = s_transactions[s_transactions['product_group_name'] == 'Accessories']
ax = sns.boxplot(data=_, x='price', y='product_type_name')
ax.set_xlabel('Price outliers', fontsize=22)
ax.set_ylabel('Index names', fontsize=22)
ax.xaxis.set_tick_params(labelsize=22)
ax.yaxis.set_tick_params(labelsize=22)
del _

plt.show()


articles_index = s_transactions[['index_name', 'price']].groupby('index_name').mean()
sns.set_style("darkgrid")
f, ax = plt.subplots(figsize=(10,5))
ax = sns.barplot(x=articles_index.price, y=articles_index.index, color='orange', alpha=0.8)
ax.set_xlabel('Price by index')
ax.set_ylabel('Index')
plt.show()

# product_list = ['Shoes', 'Garment Full body', 'Bags', 'Garment Lower body', 'Underwear/nightwear']
# colors = ['cadetblue', 'orange', 'mediumspringgreen', 'tomato', 'lightseagreen']
# k = 0
# f, ax = plt.subplots(3, 2, figsize=(20, 15))
# for i in range(3):
#     for j in range(2):
#         try:
#             product = product_list[k]
#             s_transactions = s_transactions[s_transactions.product_group_name == product_list[k]]
#             series_mean = s_transactions[['t_dat', 'price']].groupby(pd.Grouper(key="t_dat", freq='M')).mean().fillna(0)
#             series_std = s_transactions[['t_dat', 'price']].groupby(pd.Grouper(key="t_dat", freq='M')).std().fillna(0)
#             ax[i, j].plot(series_mean, linewidth=4, color=colors[k])
#             ax[i, j].fill_between(series_mean.index, (series_mean.values-2*series_std.values).ravel(),
#                              (series_mean.values+2*series_std.values).ravel(), color=colors[k], alpha=.1)
#             ax[i, j].set_title(f'Mean {product_list[k]} price in time')
#             ax[i, j].set_xlabel('month')
#             ax[i, j].set_xlabel(f'{product_list[k]}')
#             k += 1
#         except IndexError:
#             ax[i, j].set_visible(False)
# plt.show()

s_csv = data_dir + "s_transaction.csv"
s_transactions.to_csv(s_csv)